name: "OpenAI PR Review"

on:
  issue_comment:
    types: [created]  # Se dispara cuando se crea un comentario en un issue/pr

jobs:
  openai-pr-review:
    # Solo ejecutamos si el comentario se hace sobre un Pull Request.
    if: ${{ github.event.issue.pull_request != null }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Comprobar comando en el comentario
        id: parse_comment
        run: |
          echo "Comentario recibido: ${{ github.event.comment.body }}"
          
          # Convertimos el comentario a minúsculas para comparaciones sencillas
          COMENTARIO=$(echo "${{ github.event.comment.body }}" | tr '[:upper:]' '[:lower:]')

          # Revisar si incluye /review o /summary
          if [[ "$COMENTARIO" == *"/review"* ]]; then
            echo "Comando /review detectado."
            echo "COMMAND=review" >> $GITHUB_OUTPUT
          elif [[ "$COMENTARIO" == *"/summary"* ]]; then
            echo "Comando /summary detectado."
            echo "COMMAND=summary" >> $GITHUB_OUTPUT
          else
            echo "No se encontró comando válido."
            echo "COMMAND=none" >> $GITHUB_OUTPUT
          fi

      - name: Obtener contenido del Pull Request
        id: pr_info
        # Obtendremos la info más básica del PR a través de la API de GitHub.
        # (Si quisieras obtener el diff, podrías hacer un checkout y comparar cambios localmente
        #  o usar la REST API de GitHub para extraer archivos. Este ejemplo es simplificado.)
        run: |
          # Obtenemos el número del PR
          PR_NUMBER="${{ github.event.issue.number }}"
          # Llamamos a la API para obtener datos del PR
          PR_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          
          # Obtenemos título, cuerpo y autor
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_BODY=$(echo "$PR_DATA" | jq -r '.body')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')

          # Guardamos estos valores en outputs para usarlos en el paso siguiente
          echo "title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "body=$PR_BODY" >> $GITHUB_OUTPUT
          echo "author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Comprobar si hay que ejecutar la llamada a OpenAI
        if: ${{ steps.parse_comment.outputs.COMMAND != 'none' }}
        uses: actions/checkout@v3

      - name: Instalar dependencias (Node.js)
        if: ${{ steps.parse_comment.outputs.COMMAND != 'none' }}
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Instalar dependencias del proyecto
        if: ${{ steps.parse_comment.outputs.COMMAND != 'none' }}
        run: npm install axios

      - name: Generar respuesta con OpenAI
        if: ${{ steps.parse_comment.outputs.COMMAND != 'none' }}
        id: openai_call
        run: |
          # Creamos un pequeño script en Node.js que consulte la API de OpenAI
          # con la información del PR y devuelva la salida por consola.

          cat << 'EOF' > openai_call.js
          const axios = require('axios');
          (async () => {
            try {
              const command = process.env.COMMAND;
              const prTitle = process.env.PR_TITLE;
              const prBody = process.env.PR_BODY;
              const prAuthor = process.env.PR_AUTHOR;

              // Ajusta tu prompt de acuerdo con la necesidad
              let prompt = "";
              if (command === "review") {
                prompt = `Eres un revisor de código. Haz una code review del siguiente Pull Request de GitHub:
Título: ${prTitle}
Autor: ${prAuthor}
Descripción: ${prBody}
Proporciona una reseña constructiva y clara, y menciona mejoras o errores a resolver.`;
              } else if (command === "summary") {
                prompt = `Eres un asistente que ofrece resúmenes. Resume el siguiente Pull Request de GitHub:
Título: ${prTitle}
Autor: ${prAuthor}
Descripción: ${prBody}
Proporciona un resumen conciso, con puntos clave y contexto.`;
              }

              const response = await axios.post(
                "https://api.openai.com/v1/chat/completions",
                {
                  model: "gpt-3.5-turbo",  // Puedes usar tu modelo preferido
                  messages: [
                    { role: "system", content: "Eres un asistente experimentado en revisión de PRs y creación de resúmenes."},
                    { role: "user", content: prompt }
                  ],
                  temperature: 0.2
                },
                {
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
                  }
                }
              );
              
              // Obtenemos el texto generado
              const generatedText = response.data.choices[0].message.content;
              console.log("GENERATED_TEXT::" + generatedText.replace(/\r?\n/g, '\\n'));
            } catch (error) {
              console.error(error);
              process.exit(1);
            }
          })();
          EOF

          # Ejecutamos el script
          OUTPUT=$(COMMAND=${{ steps.parse_comment.outputs.COMMAND }} \
                   PR_TITLE="${{ steps.pr_info.outputs.title }}" \
                   PR_BODY="${{ steps.pr_info.outputs.body }}" \
                   PR_AUTHOR="${{ steps.pr_info.outputs.author }}" \
                   OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                   node openai_call.js
                 )

          # Extraemos la línea que contiene GENERATED_TEXT::
          # y guardamos el contenido a continuación como un output.
          GENERATED_TEXT=$(echo "$OUTPUT" | sed -n 's/^GENERATED_TEXT:://p')
          echo "review_or_summary=$GENERATED_TEXT" >> $GITHUB_OUTPUT

      - name: Comentar en el Pull Request la respuesta
        if: ${{ steps.parse_comment.outputs.COMMAND != 'none' }}
        run: |
          # Comentamos en el PR con la respuesta
          PR_NUMBER="${{ github.event.issue.number }}"
          BODY="${{ steps.openai_call.outputs.review_or_summary }}"

          # Usamos la API de GitHub para publicar el comentario
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body": "'"${BODY//\"/\\\"}"'"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
