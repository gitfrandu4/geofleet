name: AI PR Review

on:
  issue_comment:
    types: [created]

jobs:
  process-commands:
    if: |
      github.event.issue.pull_request &&
      (contains(github.event.comment.body, '/review') || contains(github.event.comment.body, '/summary'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Debug Event Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Is PR: ${{ github.event.issue.pull_request != null }}"
          echo "Comment body: ${{ github.event.comment.body }}"

      - name: Get PR Details
        id: pr_details
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          PR_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          
          echo "head_sha=$(echo "$PR_DATA" | jq -r '.head.sha')" >> $GITHUB_OUTPUT
          echo "base_sha=$(echo "$PR_DATA" | jq -r '.base.sha')" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.pr_details.outputs.head_sha }}

      - name: Get PR Changes
        id: changes
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          PR_DIFF=$(curl -s -L \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3.diff" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          
          if [ -z "$PR_DIFF" ]; then
            echo "Error: Could not fetch PR diff"
            exit 1
          fi
          
          # Escapar caracteres especiales y preservar formato
          PR_DIFF_ESCAPED=$(echo "$PR_DIFF" | sed 's/`/\\`/g' | sed 's/\$/\\$/g')
          
          echo "DIFF<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_DIFF_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Debug info
          echo "Diff length: ${#PR_DIFF}"
          echo "First 100 characters of diff:"
          echo "$PR_DIFF" | head -c 100

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install openai

      - name: Process Review Command
        if: contains(github.event.comment.body, '/review')
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_DIFF: ${{ steps.changes.outputs.DIFF }}
        with:
          script: |
            if (!process.env.PR_DIFF) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ùå Error: No se pudieron obtener los cambios del PR para revisi√≥n'
              });
              return;
            }

            const { OpenAI } = require('openai');
            const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

            try {
              const prompt = `Act√∫a como un experimentado Tech Lead de desarrollo Android con m√°s de 10 a√±os de experiencia en la plataforma. Tu tarea es realizar una revisi√≥n de c√≥digo detallada y educativa de este Pull Request.

              Contexto: Este es un PR para una aplicaci√≥n Android moderna desarrollada en Kotlin, siguiendo los principios de Clean Architecture y las mejores pr√°cticas de Material Design.

              Cambios a revisar:
              \`\`\`diff
              ${process.env.PR_DIFF}
              \`\`\`

              Instrucciones espec√≠ficas:
              1. Analiza el c√≥digo l√≠nea por l√≠nea, prestando especial atenci√≥n a:
                 - Patrones de dise√±o y arquitectura
                 - Manejo de recursos y memoria
                 - Posibles problemas de rendimiento
                 - Seguridad y manejo de datos
                 - Calidad y mantenibilidad del c√≥digo

              2. Estructura tu revisi√≥n siguiendo este formato:

              ## üéØ Resumen Ejecutivo
              - Prop√≥sito principal de los cambios
              - Impacto en la arquitectura y funcionalidad
              - Evaluaci√≥n general de la implementaci√≥n

              ## üí´ Puntos Destacados
              - Implementaciones elegantes o innovadoras
              - Uso efectivo de caracter√≠sticas de Kotlin
              - Optimizaciones y mejoras de rendimiento
              - Buenas pr√°cticas de UI/UX

              ## ‚ö†Ô∏è √Åreas de Atenci√≥n
              - Problemas potenciales de rendimiento
              - Posibles memory leaks
              - Edge cases no considerados
              - Vulnerabilidades de seguridad
              - Problemas de mantenibilidad

              ## üõ†Ô∏è Recomendaciones T√©cnicas
              - Sugerencias espec√≠ficas de mejora con ejemplos de c√≥digo
              - Referencias a la documentaci√≥n oficial de Android
              - Patrones y pr√°cticas recomendadas
              - Optimizaciones sugeridas

              ## üìã Checklist de Verificaci√≥n
              - [ ] Sigue los principios SOLID
              - [ ] Implementa manejo adecuado de errores
              - [ ] Incluye logs apropiados
              - [ ] Considera el ciclo de vida de los componentes
              - [ ] Maneja configuraciones de pantalla
              - [ ] Sigue las gu√≠as de Material Design
              - [ ] Optimiza el uso de recursos
              - [ ] Incluye documentaci√≥n adecuada

              Requisitos adicionales:
              - S√© espec√≠fico y detallado en cada punto
              - Proporciona ejemplos concretos cuando sea posible
              - Incluye enlaces a documentaci√≥n relevante
              - Mant√©n un tono constructivo y educativo
              - Prioriza las mejores pr√°cticas de Android moderno`;

              const completion = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [
                  { 
                    role: "system", 
                    content: "Eres un Tech Lead de Android altamente experimentado, especializado en desarrollo moderno con Kotlin, arquitectura limpia, patrones de dise√±o y mejores pr√°cticas de la plataforma. Tu objetivo es proporcionar revisiones de c√≥digo detalladas, educativas y accionables que ayuden a mejorar la calidad del c√≥digo y el conocimiento del equipo. Tienes amplia experiencia en optimizaci√≥n de rendimiento, seguridad m√≥vil y desarrollo de aplicaciones escalables."
                  },
                  { role: "user", content: prompt }
                ],
                temperature: 0.1,
                max_tokens: 2500
              });

              const review = completion.choices[0].message.content;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `# üîç Revisi√≥n T√©cnica del Pull Request\n\n${review}\n\n---\n*Revisi√≥n generada por el AI Code Reviewer - v2.0*`
              });
            } catch (error) {
              console.error('Error during review generation:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå Error al generar la revisi√≥n: ${error.message}`
              });
            }

      - name: Process Summary Command
        if: contains(github.event.comment.body, '/summary')
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_DIFF: ${{ steps.changes.outputs.DIFF }}
        with:
          script: |
            if (!process.env.PR_DIFF) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ùå Error: No se pudieron obtener los cambios del PR para el resumen'
              });
              return;
            }

            const { OpenAI } = require('openai');
            const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

            try {
              const prompt = `Act√∫a como un Arquitecto de Software Android con amplia experiencia en desarrollo m√≥vil moderno. Tu tarea es crear un resumen t√©cnico educativo de este Pull Request que sirva como documento de aprendizaje para el equipo.

              Contexto: Este PR es parte de una aplicaci√≥n Android moderna desarrollada en Kotlin, siguiendo Clean Architecture y las mejores pr√°cticas actuales de desarrollo m√≥vil.

              Cambios a analizar:
              \`\`\`diff
              ${process.env.PR_DIFF}
              \`\`\`

              Instrucciones espec√≠ficas:
              1. Analiza los cambios t√©cnicos y su impacto en:
                 - Arquitectura de la aplicaci√≥n
                 - Patrones de dise√±o implementados
                 - Uso de APIs y bibliotecas
                 - Rendimiento y escalabilidad
                 - Mantenibilidad y testing

              2. Estructura el resumen siguiendo este formato:

              ## üîç An√°lisis T√©cnico
              - Descripci√≥n detallada de los cambios arquitect√≥nicos
              - Impacto en los componentes existentes
              - Nuevas funcionalidades y su implementaci√≥n
              - Cambios en el flujo de datos

              ## üéØ Objetivos y Soluciones
              - Problema(s) que resuelve este PR
              - Enfoque t√©cnico elegido
              - Alternativas consideradas
              - Justificaci√≥n de las decisiones t√©cnicas

              ## üìö Conceptos T√©cnicos Clave
              - Patrones de dise√±o aplicados
              - APIs de Android utilizadas
              - Bibliotecas y frameworks implementados
              - Caracter√≠sticas de Kotlin aprovechadas

              ## üí° Lecciones y Mejores Pr√°cticas
              - T√©cnicas de desarrollo Android moderno
              - Optimizaciones de rendimiento
              - Patrones de arquitectura limpia
              - Pr√°cticas de testing

              ## üîó Referencias y Recursos
              - Enlaces a documentaci√≥n oficial de Android
              - Gu√≠as relevantes de Kotlin
              - Art√≠culos t√©cnicos relacionados
              - Ejemplos de implementaciones similares

              ## üìã Puntos de Aprendizaje
              - Conceptos t√©cnicos importantes
              - T√©cnicas avanzadas utilizadas
              - Consideraciones de rendimiento
              - Mejores pr√°cticas implementadas

              Requisitos adicionales:
              - Enf√≥cate en el valor educativo y la transferencia de conocimiento
              - Proporciona ejemplos concretos y casos de uso
              - Incluye referencias espec√≠ficas a la documentaci√≥n
              - Destaca las innovaciones t√©cnicas y su prop√≥sito
              - Mant√©n un enfoque pr√°ctico y aplicable`;

              const completion = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [
                  { 
                    role: "system", 
                    content: "Eres un Arquitecto de Software Android con amplia experiencia en desarrollo m√≥vil moderno, especializado en Kotlin, Clean Architecture, patrones de dise√±o y mejores pr√°cticas. Tu objetivo es crear res√∫menes t√©cnicos educativos que ayuden al equipo a comprender las decisiones arquitect√≥nicas, patrones implementados y lecciones t√©cnicas importantes. Tienes un profundo conocimiento de las √∫ltimas tendencias y mejores pr√°cticas en desarrollo Android."
                  },
                  { role: "user", content: prompt }
                ],
                temperature: 0.1,
                max_tokens: 2500
              });

              const summary = completion.choices[0].message.content;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `# üìñ Resumen T√©cnico Educativo\n\n${summary}\n\n---\n*Resumen generado por el AI Technical Summarizer - v2.0*`
              });
            } catch (error) {
              console.error('Error during summary generation:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå Error al generar el resumen: ${error.message}`
              });
            }
